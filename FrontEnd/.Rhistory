engine_configuration = "Inline"  # Example engine configuration
)
source_python("Models/LM/loadLM_Predict.py")
predicted_price <- predict_car_prices(newdata)
testdata<- predicted_price
newdata <- data.frame(
brand = "Honda",  # Example brand
model = "Civic",  # Example model
model_year = 2023,  # Example model year
milage = 500000,  # Example mileage in kilometers
engine_horsepower = 400,  # Example engine horsepower
fuel_type = "Diesel",  # Example fuel type
transmission = "Automatic",  # Example transmission type
accident = "None reported",  # Example accident history (Yes/No)
engine_technology = "Hybrid",  # Example engine technology
engine_special = "None",  # Example engine special features
engine_configuration = "Inline"  # Example engine configuration
)
source_python("Models/LM/loadLM_Predict.py")
predicted_price <- predict_car_prices(newdata)
OneHotEncoder_R <- function(Data){
print("6)Dealing with Onehot encoding")
dummies <- dummyVars("~ .", data = Data, fullRank = TRUE)
Data_encoded <- predict(dummies, newdata = Data)
Data_encoded <- as.data.frame(Data_encoded)
print("6)Done with Onehot encoding")
return(Data_encoded)
}
EncodedData<- OneHotEncoder_R(newdata)
newdata <- data.frame(
brand = "Honda",  # Example brand
model = "Civic",  # Example model
model_year = 2023,  # Example model year
milage = 500000,  # Example mileage in kilometers
engine_horsepower = 400,  # Example engine horsepower
fuel_type = "Diesel",  # Example fuel type
transmission = "Automatic",  # Example transmission type
accident = "None reported",  # Example accident history (Yes/No)
engine_technology = "Hybrid",  # Example engine technology
engine_special = "None",  # Example engine special features
engine_configuration = "Inline"  # Example engine configuration
)
EncodedData<- OneHotEncoder_R(newdata)
library(caret)
newdata <- data.frame(
brand = "Honda",  # Example brand
model = "Civic",  # Example model
model_year = 2023,  # Example model year
milage = 500000,  # Example mileage in kilometers
engine_horsepower = 400,  # Example engine horsepower
fuel_type = "Diesel",  # Example fuel type
transmission = "Automatic",  # Example transmission type
accident = "None reported",  # Example accident history (Yes/No)
engine_technology = "Hybrid",  # Example engine technology
engine_special = "None",  # Example engine special features
engine_configuration = "Inline"  # Example engine configuration
)
EncodedData<- OneHotEncoder_R(newdata)
newdata <- data.frame(
brand = "Honda",  # Example brand
model = "Civic",  # Example model
model_year = 2023,  # Example model year
milage = 500000,  # Example mileage in kilometers
engine_horsepower = 400,  # Example engine horsepower
fuel_type = "Diesel",  # Example fuel type
transmission = "Automatic",  # Example transmission type
accident = "None reported",  # Example accident history (Yes/No)
engine_technology = "Hybrid",  # Example engine technology
engine_special = "None",  # Example engine special features
engine_configuration = "Inline"  # Example engine configuration
)
# Assuming `train_dummies` is the dummies object from your training data
train_result <- OneHotEncoder_R(newdata)  # Fit the encoding model on new data
OneHotEncoder_R <- function(Data, dummies = NULL) {
print("6) Dealing with OneHot Encoding")
# Check if any column has only one unique value and convert it to a character if needed
for (col in colnames(Data)) {
if (length(unique(Data[[col]])) == 1) {
Data[[col]] <- as.character(Data[[col]])
}
}
# If dummies is not provided, fit the dummyVars model on the training data
if (is.null(dummies)) {
dummies <- dummyVars("~ .", data = Data, fullRank = TRUE)
}
# Apply the one-hot encoding transformation to the data
Data_encoded <- predict(dummies, newdata = Data)
Data_encoded <- as.data.frame(Data_encoded)
print("6) Done with OneHot Encoding")
return(list(Data_encoded = Data_encoded, dummies = dummies))  # Return both the encoded data and the dummies model
}
# Assuming `train_dummies` is the dummies object from your training data
train_result <- OneHotEncoder_R(newdata)  # Fit the encoding model on new data
OneHotEncoder_R <- function(Data, columns_file) {
print("6) Dealing with OneHot Encoding")
# Read the column names from the file
columns_to_encode <- readLines(columns_file)  # This file should have column names for categorical variables
# Ensure the columns_to_encode exist in the Data frame
columns_to_encode <- intersect(columns_to_encode, colnames(Data))
# Perform one-hot encoding only for the listed categorical columns
dummies <- dummyVars(paste("~", paste(columns_to_encode, collapse = "+")), data = Data, fullRank = TRUE)
# Apply the one-hot encoding model
Data_encoded <- predict(dummies, newdata = Data)
# Convert the output into a dataframe
Data_encoded <- as.data.frame(Data_encoded)
print("6) Done with OneHot Encoding")
return(Data_encoded)
}
newdata <- data.frame(
brand = "Honda",  # Example brand
model = "Civic",  # Example model
model_year = 2023,  # Example model year
milage = 500000,  # Example mileage in kilometers
engine_horsepower = 400,  # Example engine horsepower
fuel_type = "Diesel",  # Example fuel type
transmission = "Automatic",  # Example transmission type
accident = "None reported",  # Example accident history (Yes/No)
engine_technology = "Hybrid",  # Example engine technology
engine_special = "None",  # Example engine special features
engine_configuration = "Inline"  # Example engine configuration
)
train_result <- OneHotEncoder_R(newdata,"Models/LM/train_columns.txt")
OneHotEncoder_R <- function(Data, columns_file) {
print("6) Dealing with OneHot Encoding")
# Read the column names from the file
columns_to_encode <- readLines(columns_file)  # This file should have column names for categorical variables
# Ensure the columns_to_encode exist in the Data frame
columns_to_encode <- intersect(columns_to_encode, colnames(Data))
# Check if there are any columns to encode
if (length(columns_to_encode) == 0) {
stop("No valid columns found for one-hot encoding. Please check the columns file and input data.")
}
# Create the formula for dummyVars
formula <- paste("~", paste(columns_to_encode, collapse = "+"))
# Perform one-hot encoding only for the listed categorical columns
dummies <- dummyVars(formula, data = Data, fullRank = TRUE)
# Apply the one-hot encoding model
Data_encoded <- predict(dummies, newdata = Data)
# Convert the output into a dataframe
Data_encoded <- as.data.frame(Data_encoded)
print("6) Done with OneHot Encoding")
return(Data_encoded)
}
# Example usage for new data and column file
newdata <- data.frame(
brand = "Honda",  # Example brand
model = "Civic",  # Example model
model_year = 2023,  # Example model year
milage = 500000,  # Example mileage in kilometers
engine_horsepower = 400,  # Example engine horsepower
fuel_type = "Diesel",  # Example fuel type
transmission = "Automatic",  # Example transmission type
accident = "None reported",  # Example accident history (Yes/No)
engine_technology = "Hybrid",  # Example engine technology
engine_special = "None",  # Example engine special features
engine_configuration = "Inline"  # Example engine configuration
)
# Perform one-hot encoding using the column names from the file
train_result <- OneHotEncoder_R(newdata, "Models/LM/train_columns.txt")
newdata
# Example usage for new data and column file
newdata <- data.frame(
brand = "Honda",  # Example brand
model = "Civic",  # Example model
modelYear = 2023,  # Example model year
Milage = 500000,  # Example mileage in kilometers
EngineHorsepower = 400,  # Example engine horsepower
FuelType = "Diesel",  # Example fuel type
Ttransmission = "Automatic",  # Example transmission type
Accident = "None reported",  # Example accident history (Yes/No)
EngineTechnology = "Hybrid",  # Example engine technology
EngineSpecial = "None",  # Example engine special features
EngineConfiguration = "Inline"  # Example engine configuration
)
# Perform one-hot encoding using the column names from the file
train_result <- OneHotEncoder_R(newdata, "Models/LM/train_columns.txt")
train_result
OneHotEncoder_R <- function(Data, columns_file) {
print("6) Dealing with OneHot Encoding")
columns_to_encode <- readLines(columns_file)
columns_to_encode <- intersect(columns_to_encode, colnames(Data))
if (length(columns_to_encode) == 0) {
stop("No valid columns found for one-hot encoding. Please check the columns file and input data.")
}
formula <- paste("~", paste(columns_to_encode, collapse = "+"))
dummies <- dummyVars(formula, data = Data, fullRank = TRUE)
Data_encoded <- predict(dummies, newdata = Data)
Data_encoded <- as.data.frame(Data_encoded)
print("6) Done with OneHot Encoding")
return(Data_encoded)
}
newdata <- data.frame(
brand = "Honda",
model = "Civic",
modelYear = 2023,
Milage = 500000,
EngineHorsepower = 400,
FuelType = "Diesel",
Transmission = "Automatic",
Accident = "None reported",
EngineTechnology = "Hybrid",
EngineSpecial = "None",
EngineConfiguration = "Inline"
)
train_result <- OneHotEncoder_R(newdata, "Models/LM/train_columns.txt")
print(train_result)
newdata <- data.frame(
brand = "Honda",
model = "Civic",
ModelYear = 2023,
Milage = 500000,
EngineHorsepower = 400,
FuelType = "Diesel",
Transmission = "Automatic",
Accident = "None reported",
EngineTechnology = "Hybrid",
EngineSpecial = "None",
EngineConfiguration = "Inline"
)
train_result <- OneHotEncoder_R(newdata, "Models/LM/train_columns.txt")
print(train_result)
newdata$brand
# Create a new data frame with the selected inputs
newdata <- data.frame(
brand = factor(input$Car_brand, levels = levels(Unique_Brands$brand)),
model = factor(input$Car_model, levels = levels(Unique_model$model)),
model_year = factor(input$Car_model_year,levels = levels(ProcessedData$model_year)),
milage = as.numeric(input$Car_milage),
engine_horsepower = as.numeric(input$Car_engine_horsepower),
fuel_type = factor(input$Car_fuel_type, levels = levels(Unique_fuel_type$fuel_type)),
transmission = factor(input$Car_transmission, levels = levels(Unique_transmission$transmission)),
accident = factor(input$Car_accident, levels = levels(Unique_accident$accident)),
engine_technology = factor(input$Car_engine_technology, levels = levels(Unique_engine_technology$engine_technology)),
engine_configuration = factor(input$Car_engine_configuration, levels = levels(Unique_engine_configuration$engine_configuration)),
engine_special = factor(input$Car_engine_special, levels = levels(Unique_engine_special$engine_special))
)
runApp()
runApp()
runApp()
# Create a new data frame with the selected inputs
newdata <- data.frame(
brand = factor(input$Car_brand, levels = levels(Unique_Brands$brand)),
model = factor(input$Car_model, levels = levels(Unique_model$model)),
model_year = factor(input$Car_model_year,levels = levels(ProcessedData$model_year)),
milage = as.numeric(input$Car_milage),
engine_horsepower = as.numeric(input$Car_engine_horsepower),
fuel_type = factor(input$Car_fuel_type, levels = levels(Unique_fuel_type$fuel_type)),
transmission = factor(input$Car_transmission, levels = levels(Unique_transmission$transmission)),
accident = factor(input$Car_accident, levels = levels(Unique_accident$accident)),
engine_technology = factor(input$Car_engine_technology, levels = levels(Unique_engine_technology$engine_technology)),
engine_configuration = factor(input$Car_engine_configuration, levels = levels(Unique_engine_configuration$engine_configuration)),
engine_special = factor(input$Car_engine_special, levels = levels(Unique_engine_special$engine_special))
)
Unique_Brands[1]
Unique_Brands[[1]]
Unique_Brands[[1]][1]
Unique_model[[1]]
Unique_model[[1]][1]
ProcessedData$model_year
ProcessedData$model_year[1]
as.numeric(1000)
Unique_fuel_type$fuel_type[1]
Unique_fuel_type$fuel_type[2]
Unique_transmission$transmission[1]
Unique_accident$accident[1]
Unique_engine_technology$engine_technology[1]
Unique_engine_configuration$engine_configuration[1]
Unique_engine_special$engine_special
Unique_engine_special$engine_special[1]
# Create a new data frame with the selected inputs
newdata <- data.frame(
brand = factor(Unique_Brands[[1]][1], levels = levels(Unique_Brands$brand)),
model = factor(Unique_model[[1]][1], levels = levels(Unique_model$model)),
model_year = factor(ProcessedData$model_year[1],levels = levels(ProcessedData$model_year)),
milage = as.numeric(1000),
engine_horsepower = as.numeric(250),
fuel_type = factor(Unique_fuel_type$fuel_type[1], levels = levels(Unique_fuel_type$fuel_type)),
transmission = factor(Unique_transmission$transmission[1], levels = levels(Unique_transmission$transmission)),
accident = factor(Unique_accident$accident[1], levels = levels(Unique_accident$accident)),
engine_technology = factor(Unique_engine_technology$engine_technology[1], levels = levels(Unique_engine_technology$engine_technology)),
engine_configuration = factor(Unique_engine_configuration$engine_configuration[1], levels = levels(Unique_engine_configuration$engine_configuration)),
engine_special = factor(Unique_engine_special$engine_special[1], levels = levels(Unique_engine_special$engine_special))
)
newdata
# Create a new data frame with the selected inputs
newdata <- data.frame(
brand = factor(Unique_Brands[[1]][1], levels = levels(Unique_Brands$brand[[1]])),
model = factor(Unique_model[[1]][1], levels = levels(Unique_model$model)),
model_year = factor(ProcessedData$model_year[1],levels = levels(ProcessedData$model_year)),
milage = as.numeric(1000),
engine_horsepower = as.numeric(250),
fuel_type = factor(Unique_fuel_type$fuel_type[1], levels = levels(Unique_fuel_type$fuel_type)),
transmission = factor(Unique_transmission$transmission[1], levels = levels(Unique_transmission$transmission)),
accident = factor(Unique_accident$accident[1], levels = levels(Unique_accident$accident)),
engine_technology = factor(Unique_engine_technology$engine_technology[1], levels = levels(Unique_engine_technology$engine_technology)),
engine_configuration = factor(Unique_engine_configuration$engine_configuration[1], levels = levels(Unique_engine_configuration$engine_configuration)),
engine_special = factor(Unique_engine_special$engine_special[1], levels = levels(Unique_engine_special$engine_special))
)
newdata
# Create a new data frame with the selected inputs
newdata <- data.frame(
brand = factor(Unique_Brands[[1]][1], levels = levels(Unique_Brands$brand)),
model = factor(Unique_model[[1]][1], levels = levels(Unique_model$model)),
model_year = factor(ProcessedData$model_year[1],levels = levels(ProcessedData$model_year)),
milage = as.numeric(1000),
engine_horsepower = as.numeric(250),
fuel_type = factor(Unique_fuel_type$fuel_type[1], levels = levels(Unique_fuel_type$fuel_type)),
transmission = factor(Unique_transmission$transmission[1], levels = levels(Unique_transmission$transmission)),
accident = factor(Unique_accident$accident[1], levels = levels(Unique_accident$accident)),
engine_technology = factor(Unique_engine_technology$engine_technology[1], levels = levels(Unique_engine_technology$engine_technology)),
engine_configuration = factor(Unique_engine_configuration$engine_configuration[1], levels = levels(Unique_engine_configuration$engine_configuration)),
engine_special = factor(Unique_engine_special$engine_special[1], levels = levels(Unique_engine_special$engine_special))
)
# Create a new data frame with the selected inputs
newdata <- data.frame(
brand = factor(Unique_Brands[[1]][1], levels = levels(Unique_Brands$brand)),
model = factor(Unique_model[[1]][1], levels = levels(Unique_model$model)),
model_year = factor(ProcessedData$model_year[1],levels = levels(ProcessedData$model_year)),
milage = as.numeric(1000),
engine_horsepower = as.numeric(250),
fuel_type = factor(Unique_fuel_type$fuel_type[1], levels = levels(Unique_fuel_type$fuel_type)),
transmission = factor(Unique_transmission$transmission[1], levels = levels(Unique_transmission$transmission)),
accident = factor(Unique_accident$accident[1], levels = levels(Unique_accident$accident)),
engine_technology = factor(Unique_engine_technology$engine_technology[1], levels = levels(Unique_engine_technology$engine_technology)),
engine_configuration = factor(Unique_engine_configuration$engine_configuration[1], levels = levels(Unique_engine_configuration$engine_configuration)),
engine_special = factor(Unique_engine_special$engine_special[1], levels = levels(Unique_engine_special$engine_special))
)
newdata
# Create a new data frame with the selected inputs
newdata <- data.frame(
brand = factor(Unique_Brands[[1]][1], levels = levels(Unique_Brands$brand)),
model = factor(Unique_model[[1]][1], levels = levels(Unique_model$model)),
model_year = as.numeric(2012),
milage = as.numeric(1000),
engine_horsepower = as.numeric(250),
fuel_type = factor(Unique_fuel_type$fuel_type[1], levels = levels(Unique_fuel_type$fuel_type)),
transmission = factor(Unique_transmission$transmission[1], levels = levels(Unique_transmission$transmission)),
accident = factor(Unique_accident$accident[1], levels = levels(Unique_accident$accident)),
engine_technology = factor(Unique_engine_technology$engine_technology[1], levels = levels(Unique_engine_technology$engine_technology)),
engine_configuration = factor(Unique_engine_configuration$engine_configuration[1], levels = levels(Unique_engine_configuration$engine_configuration)),
engine_special = factor(Unique_engine_special$engine_special[1], levels = levels(Unique_engine_special$engine_special))
)
newdata
newdata$brand <- factor(newdata$brand, levels = Unique_Brands$brand)
newdata$model <- factor(newdata$model, levels = Unique_model$model)
newdata$model_year <- factor(newdata$model_year, levels = Brands_years$model_year)
newdata$fuel_type <- factor(newdata$fuel_type, levels = Unique_fuel_type$fuel_type)
newdata$transmission <- factor(newdata$transmission, levels = Unique_transmission$transmission)
newdata$accident <- factor(newdata$accident, levels = Unique_accident$accident)
newdata$engine_technology <- factor(newdata$engine_technology, levels = Unique_engine_technology$engine_technology)
newdata$engine_special <- factor(newdata$engine_special, levels = Unique_engine_special$engine_special)
newdata$engine_configuration <- factor(newdata$engine_configuration, levels = Unique_engine_configuration$engine_configuration)
newdata
levels(Unique_Brands)
levels(Unique_Brands$brand)
levels(Unique_Brands$brand[[1]])
factor(Unique_Brands)
as.factor(Unique_Brands)
brand_factor <- factor(Unique_Brands$brand, levels = levels(ProcessedData$brand))
model_factor <- factor(Unique_model$model, levels = levels(ProcessedData$model))
fuel_type_factor <- factor(Unique_fuel_type$fuel_type, levels = levels(ProcessedData$fuel_type))
transmission_factor <- factor(Unique_transmission$transmission, levels = levels(ProcessedData$transmission))
accident_factor <- factor(Unique_accident$accident, levels = levels(ProcessedData$accident))
engine_technology_factor <- factor(Unique_engine_technology$engine_technology, levels = levels(ProcessedData$engine_technology))
engine_special_factor <- factor(Unique_engine_special$engine_special, levels = levels(ProcessedData$engine_special))
engine_configuration_factor <- factor(Unique_engine_configuration$engine_configuration, levels = levels(ProcessedData$engine_configuration))
brand_factor
levels(ProcessedData$brand)
unique(Unique_Brands$brand)
ProcessedData$brand <- factor(ProcessedData$brand, levels = Unique_Brands$brand)
ProcessedData
levels(ProcessedData$brand)
ProcessedData
shiny::runApp()
runApp()
runApp()
runApp()
#      paste("Predicted Price: $", predicted_price)
paste(FuelType)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv", stringsAsFactors = FALSE)
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
user_data <-   read.csv("users.csv")
user_data
View(user_data)
user_data <-   read.csv("users.csv")
View(user_data)
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
read.csv("users.csv")
read.csv(file = "DATASETS/Web_Purpose_ProcessedData.csv")
read.csv(file = "DATASETS/Web_Purpose_ProcessedData.csv")
read.csv(file = "users.csv")
read.csv(file = "users.csv")
readxl::read_xlsx("users.xlsx")
runApp()
users
user_data
return(readxl::read_xlsx("users.xlsx"))
readxl::read_xlsx("users.xlsx")
runApp()
runApp()
runApp()
readxl::read_xlsx("users.csv")
read.csv("users.csv")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('E:/nani projects/DATA SCIENCE/version3.0/FrontEnd')
runApp('E:/nani projects/DATA SCIENCE/version3.0/FrontEnd')
runApp('E:/nani projects/DATA SCIENCE/version3.0/FrontEnd')
runApp('E:/nani projects/DATA SCIENCE/version3.0/FrontEnd')
runApp('E:/nani projects/DATA SCIENCE/version3.0/FrontEnd')
runApp('E:/nani projects/DATA SCIENCE/version3.0/FrontEnd')
shiny::runApp()
runApp()
runApp('E:/nani projects/DATA SCIENCE/version3.0/FrontEnd')
runApp()
ProcessedData
ProcessedData %>% col()
ProcessedData %>% colnames()
ProcessedData %>% colnames() %>% select(1)
shiny::runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('app.R')
rsconnect::deployApp('')
rsconnect::deployApp('./')
install.packages('rsconnect')
install.packages("rsconnect")
runApp()
shiny::runApp()
